import React from 'react';
import { View, ScrollView, StyleSheet, Text, TouchableOpacity, StatusBar, Alert } from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { useNavigation } from '@react-navigation/native';
import Icon from 'react-native-vector-icons/MaterialCommunityIcons';
import * as Clipboard from 'expo-clipboard';
import { useWalletStore } from '../../../infrastructure/stores/walletStore';
import { WalletManager } from '../../../services/wallet';
import { useThemeStore } from '../../../infrastructure/stores/themeStore';
import { createDynamicDesignSystem } from '../../theme/dynamicDesignSystem';

export default function ModernProfileScreen() {
  const navigation = useNavigation<any>();
  const { address, totalBalance, disconnectWallet, walletData } = useWalletStore();
  const { currentTheme } = useThemeStore();
  const { colors, semanticColors, typography, spacing, shadows, borderRadius, components } = createDynamicDesignSystem(currentTheme);

  const formatAddress = (addr: string) => {
    if (!addr) return 'ÏßÄÍ∞ë Ïó∞Í≤∞ ÌïÑÏöî';
    return `${addr.substring(0, 6)}...${addr.substring(addr.length - 4)}`;
  };

  const handleCopyAddress = async () => {
    if (address) {
      await Clipboard.setStringAsync(address);
      Alert.alert('Î≥µÏÇ¨ ÏôÑÎ£å', 'ÏßÄÍ∞ë Ï£ºÏÜåÍ∞Ä ÌÅ¥Î¶ΩÎ≥¥ÎìúÏóê Î≥µÏÇ¨ÎêòÏóàÏäµÎãàÎã§.');
    }
  };

  const handleShowPrivateKey = async () => {
    if (!walletData) {
      Alert.alert('Ïò§Î•ò', 'ÏßÄÍ∞ë Îç∞Ïù¥ÌÑ∞Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
      return;
    }

    Alert.alert(
      '‚ö†Ô∏è Î≥¥Ïïà Í≤ΩÍ≥†',
      'Private KeyÎäî Îß§Ïö∞ Ï§ëÏöîÌïú Ï†ïÎ≥¥ÏûÖÎãàÎã§.\nÎã§Î•∏ ÏÇ¨ÎûåÍ≥º Ï†àÎåÄ Í≥µÏú†ÌïòÏßÄ ÎßàÏÑ∏Ïöî!\n\nPrivate KeyÎ•º ÌôïÏù∏ÌïòÏãúÍ≤†ÏäµÎãàÍπå?',
      [
        { text: 'Ï∑®ÏÜå', style: 'cancel' },
        { 
          text: 'ÌôïÏù∏', 
          style: 'destructive',
          onPress: () => showPrivateKeyModal()
        }
      ]
    );
  };

  const showPrivateKeyModal = () => {
    if (!walletData?.privateKey) {
      Alert.alert('Ïò§Î•ò', 'Private KeyÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
      return;
    }

    const privateKey = walletData.privateKey;
    const maskedKey = `${privateKey.substring(0, 10)}...${privateKey.substring(privateKey.length - 10)}`;

    Alert.alert(
      'üîê Private Key',
      `${maskedKey}\n\nÌÉ≠ÌïòÏó¨ Ï†ÑÏ≤¥ ÌÇ§ Î≥µÏÇ¨`,
      [
        { text: 'Ï∑®ÏÜå', style: 'cancel' },
        { 
          text: 'Î≥µÏÇ¨', 
          onPress: async () => {
            await Clipboard.setStringAsync(privateKey);
            Alert.alert('Î≥µÏÇ¨ ÏôÑÎ£å', 'Private KeyÍ∞Ä ÌÅ¥Î¶ΩÎ≥¥ÎìúÏóê Î≥µÏÇ¨ÎêòÏóàÏäµÎãàÎã§.\n\n‚ö†Ô∏è Î≥¥ÏïàÏùÑ ÏúÑÌï¥ ÏÇ¨Ïö© ÌõÑ ÌÅ¥Î¶ΩÎ≥¥ÎìúÎ•º ÏßÄÏõåÏ£ºÏÑ∏Ïöî.');
          }
        }
      ]
    );
  };

  const handleDisconnect = () => {
    Alert.alert(
      'ÏßÄÍ∞ë Ïó∞Í≤∞ Ìï¥Ï†ú',
      'ÏßÄÍ∞ë Ïó∞Í≤∞ÏùÑ Ìï¥Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?\n\n- ÏûÑÏãú Ïó∞Í≤∞ Ìï¥Ï†ú: Ïï± Ïû¨ÏãúÏûë Ïãú ÏûêÎèô Ïó∞Í≤∞\n- ÏôÑÏ†Ñ ÏÇ≠Ï†ú: ÏßÄÍ∞ë Îç∞Ïù¥ÌÑ∞ ÏôÑÏ†Ñ ÏÇ≠Ï†ú (Î≥µÍµ¨ Î∂àÍ∞Ä)',
      [
        { text: 'Ï∑®ÏÜå', style: 'cancel' },
        { 
          text: 'ÏûÑÏãú Ìï¥Ï†ú', 
          onPress: () => {
            disconnectWallet();
            Alert.alert('ÏôÑÎ£å', 'ÏßÄÍ∞ë Ïó∞Í≤∞Ïù¥ Ìï¥Ï†úÎêòÏóàÏäµÎãàÎã§.');
          }
        },
        { 
          text: 'ÏôÑÏ†Ñ ÏÇ≠Ï†ú', 
          style: 'destructive',
          onPress: () => {
            Alert.alert(
              'ÏßÄÍ∞ë ÏôÑÏ†Ñ ÏÇ≠Ï†ú',
              '‚ö†Ô∏è Í≤ΩÍ≥†: ÏßÄÍ∞ëÏù¥ ÏôÑÏ†ÑÌûà ÏÇ≠Ï†úÎê©ÎãàÎã§.\nÏãúÎìú Íµ¨Î¨∏ÏùÑ Î∞±ÏóÖÌïòÏßÄ ÏïäÏïòÎã§Î©¥ Î≥µÍµ¨Í∞Ä Î∂àÍ∞ÄÎä•Ìï©ÎãàÎã§.',
              [
                { text: 'Ï∑®ÏÜå', style: 'cancel' },
                {
                  text: 'ÏÇ≠Ï†ú',
                  style: 'destructive',
                  onPress: async () => {
                    try {
                      if (walletData) {
                        const walletId = `wallet_${walletData.address.toLowerCase()}`;
                        await WalletManager.deleteWallet(walletId);
                      }
                      disconnectWallet();
                      // Ïò®Î≥¥Îî©ÏúºÎ°ú Ïù¥Îèô (ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Ïä§ÌÉù Ï¥àÍ∏∞Ìôî)
                      navigation.reset({
                        index: 0,
                        routes: [{ name: 'WalletOnboarding' }],
                      });
                    } catch (error) {
                      Alert.alert('Ïò§Î•ò', 'ÏßÄÍ∞ë ÏÇ≠Ï†úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
                    }
                  }
                }
              ]
            );
          }
        }
      ]
    );
  };

  const menuItems = [
    {
      section: 'activity',
      title: 'ÎÇ¥ ÌôúÎèô',
      items: [
        { 
          icon: 'bank', 
          title: 'Ïä§ÌÖåÏù¥ÌÇπ Í¥ÄÎ¶¨', 
          subtitle: 'ÎÇ¥ Ïä§ÌÖåÏù¥ÌÇπ Ìè¨ÏßÄÏÖò ÌôïÏù∏',
          onPress: () => navigation.navigate('Staking')
        },
        { 
          icon: 'history', 
          title: 'Í±∞Îûò ÎÇ¥Ïó≠', 
          subtitle: 'Î™®Îì† Í±∞Îûò Í∏∞Î°ù Î≥¥Í∏∞',
          onPress: () => navigation.navigate('PaymentHistory')
        },
        { 
          icon: 'chart-line', 
          title: 'ÏàòÏùµ Î∂ÑÏÑù', 
          subtitle: 'Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ ÏàòÏùµÎ•† Î∂ÑÏÑù',
          onPress: () => Alert.alert('Ï§ÄÎπÑÏ§ë', 'Ïù¥ Í∏∞Îä•ÏùÄ Ï§ÄÎπÑ Ï§ëÏûÖÎãàÎã§.')
        },
      ]
    },
    {
      section: 'settings',
      title: 'ÏÑ§Ï†ï',
      items: [
        { 
          icon: 'web', 
          title: 'ÎÑ§Ìä∏ÏõåÌÅ¨ ÏÑ§Ï†ï', 
          subtitle: 'Í∏∞Î≥∏ Î∏îÎ°ùÏ≤¥Ïù∏ ÎÑ§Ìä∏ÏõåÌÅ¨ Î≥ÄÍ≤Ω',
          onPress: () => Alert.alert('Ï§ÄÎπÑÏ§ë', 'Ïù¥ Í∏∞Îä•ÏùÄ Ï§ÄÎπÑ Ï§ëÏûÖÎãàÎã§.')
        },
        { 
          icon: 'percent', 
          title: 'Ïä¨Î¶¨ÌîºÏßÄ ÏÑ§Ï†ï', 
          subtitle: 'Ïä§Ïôë Ïä¨Î¶¨ÌîºÏßÄ ÌóàÏö©Ïπò Ï°∞Ï†ï',
          onPress: () => Alert.alert('Ï§ÄÎπÑÏ§ë', 'Ïù¥ Í∏∞Îä•ÏùÄ Ï§ÄÎπÑ Ï§ëÏûÖÎãàÎã§.')
        },
        { 
          icon: 'gas-station', 
          title: 'Í∞ÄÏä§ÎπÑ ÏÑ§Ï†ï', 
          subtitle: 'Ìä∏ÎûúÏû≠ÏÖò ÏàòÏàòÎ£å Ïö∞ÏÑ†ÏàúÏúÑ',
          onPress: () => Alert.alert('Ï§ÄÎπÑÏ§ë', 'Ïù¥ Í∏∞Îä•ÏùÄ Ï§ÄÎπÑ Ï§ëÏûÖÎãàÎã§.')
        },
        { 
          icon: 'bell-outline', 
          title: 'ÏïåÎ¶º ÏÑ§Ï†ï', 
          subtitle: 'Ìë∏Ïãú ÏïåÎ¶º Î∞è Ïù¥Î©îÏùº ÏÑ§Ï†ï',
          onPress: () => Alert.alert('Ï§ÄÎπÑÏ§ë', 'Ïù¥ Í∏∞Îä•ÏùÄ Ï§ÄÎπÑ Ï§ëÏûÖÎãàÎã§.')
        },
      ]
    },
    {
      section: 'security',
      title: 'Î≥¥Ïïà',
      items: [
        { 
          icon: 'key-variant', 
          title: 'ÏãúÎìú Íµ¨Î¨∏ Î∞±ÏóÖ', 
          subtitle: 'ÏßÄÍ∞ë Î≥µÍµ¨ Íµ¨Î¨∏ ÌôïÏù∏ Î∞è Î∞±ÏóÖ',
          onPress: () => Alert.alert('Î≥¥Ïïà', 'ÏãúÎìú Íµ¨Î¨∏ÏùÑ ÏïàÏ†ÑÌïú Í≥≥Ïóê Î≥¥Í¥ÄÌïòÏÑ∏Ïöî.')
        },
        { 
          icon: 'key-outline', 
          title: 'Private Key ÌôïÏù∏', 
          subtitle: 'ÏßÄÍ∞ë Private Key Î≥¥Í∏∞ Î∞è Î≥µÏÇ¨',
          onPress: handleShowPrivateKey
        },
        { 
          icon: 'fingerprint', 
          title: 'ÏÉùÏ≤¥ Ïù∏Ï¶ù', 
          subtitle: 'Face ID / Touch ID ÏÑ§Ï†ï',
          onPress: () => Alert.alert('Ï§ÄÎπÑÏ§ë', 'Ïù¥ Í∏∞Îä•ÏùÄ Ï§ÄÎπÑ Ï§ëÏûÖÎãàÎã§.')
        },
        { 
          icon: 'shield-check', 
          title: 'Î≥¥Ïïà Í≤ÄÏÇ¨', 
          subtitle: 'ÏßÄÍ∞ë Î≥¥Ïïà ÏÉÅÌÉú Ï†êÍ≤Ä',
          onPress: () => Alert.alert('Î≥¥Ïïà Í≤ÄÏÇ¨', 'ÏßÄÍ∞ë Î≥¥Ïïà ÏÉÅÌÉúÍ∞Ä ÏñëÌò∏Ìï©ÎãàÎã§.')
        },
      ]
    },
    {
      section: 'support',
      title: 'ÏßÄÏõê',
      items: [
        { 
          icon: 'help-circle-outline', 
          title: 'ÎèÑÏõÄÎßê', 
          subtitle: 'FAQ Î∞è ÏÇ¨Ïö© Í∞ÄÏù¥Îìú',
          onPress: () => Alert.alert('Ï§ÄÎπÑÏ§ë', 'Ïù¥ Í∏∞Îä•ÏùÄ Ï§ÄÎπÑ Ï§ëÏûÖÎãàÎã§.')
        },
        { 
          icon: 'message-outline', 
          title: 'Í≥†Í∞ù ÏßÄÏõê', 
          subtitle: 'Î¨∏ÏùòÏÇ¨Ìï≠ Î∞è ÌîºÎìúÎ∞±',
          onPress: () => Alert.alert('Ï§ÄÎπÑÏ§ë', 'Ïù¥ Í∏∞Îä•ÏùÄ Ï§ÄÎπÑ Ï§ëÏûÖÎãàÎã§.')
        },
        { 
          icon: 'information-outline', 
          title: 'Ïï± Ï†ïÎ≥¥', 
          subtitle: 'Î≤ÑÏ†Ñ Î∞è ÎùºÏù¥ÏÑ†Ïä§ Ï†ïÎ≥¥',
          onPress: () => Alert.alert('Ïï± Ï†ïÎ≥¥', 'KAIA Wallet v1.0.0')
        },
      ]
    }
  ];

  // ÎèôÏ†Å Ïä§ÌÉÄÏùº ÏÉùÏÑ±
  const styles = StyleSheet.create({
    container: {
      flex: 1,
      backgroundColor: semanticColors.background.primary,
    },
    header: {
      backgroundColor: colors.primary[500],
      paddingBottom: spacing[4],
    },
    headerContent: {
      flexDirection: 'row',
      justifyContent: 'space-between',
      alignItems: 'center',
      paddingHorizontal: spacing[6],
      paddingVertical: spacing[4],
    },
    headerTitle: {
      ...typography.styles.h2,
      color: colors.white,
    },
    settingsButton: {
      width: 40,
      height: 40,
      borderRadius: borderRadius.full,
      backgroundColor: 'rgba(255, 255, 255, 0.15)',
      justifyContent: 'center',
      alignItems: 'center',
    },
    content: {
      flex: 1,
    },
    userCard: {
      ...components.card,
      margin: spacing[6],
      borderColor: colors.neutral[200],
      borderWidth: 1,
    },
    userInfo: {
      flexDirection: 'row',
      alignItems: 'center',
      marginBottom: spacing[5],
    },
    avatar: {
      width: 56,
      height: 56,
      borderRadius: borderRadius.full,
      backgroundColor: colors.primary[50],
      justifyContent: 'center',
      alignItems: 'center',
      marginRight: spacing[4],
    },
    userDetails: {
      flex: 1,
    },
    userName: {
      ...typography.styles.h3,
      marginBottom: spacing[1],
    },
    userAddress: {
      ...typography.styles.body2,
      fontFamily: typography.fontFamily.mono,
    },
    addressRow: {
      flexDirection: 'row',
      alignItems: 'center',
      paddingVertical: spacing[1],
    },
    copyIcon: {
      marginLeft: spacing[2],
    },
    balanceInfo: {
      flexDirection: 'row',
      justifyContent: 'space-between',
      alignItems: 'center',
      paddingTop: spacing[4],
      borderTopWidth: 1,
      borderTopColor: semanticColors.border.light,
    },
    balanceLabel: {
      ...typography.styles.body1,
    },
    balanceValue: {
      ...typography.styles.h3,
      fontWeight: typography.fontWeight.bold,
    },
    menuSection: {
      marginBottom: spacing[6],
    },
    sectionTitle: {
      ...typography.styles.body1,
      fontWeight: typography.fontWeight.semibold,
      paddingHorizontal: spacing[6],
      paddingVertical: spacing[4],
      backgroundColor: semanticColors.background.secondary,
    },
    menuItem: {
      flexDirection: 'row',
      justifyContent: 'space-between',
      alignItems: 'center',
      backgroundColor: semanticColors.background.primary,
      paddingHorizontal: spacing[6],
      paddingVertical: spacing[4],
      borderBottomWidth: 1,
      borderBottomColor: semanticColors.border.light,
    },
    lastMenuItem: {
      borderBottomWidth: 0,
    },
    menuItemLeft: {
      flexDirection: 'row',
      alignItems: 'center',
      flex: 1,
    },
    menuIcon: {
      width: 44,
      height: 44,
      borderRadius: borderRadius.full,
      backgroundColor: colors.neutral[100],
      justifyContent: 'center',
      alignItems: 'center',
      marginRight: spacing[4],
    },
    menuTextContainer: {
      flex: 1,
    },
    menuTitle: {
      ...typography.styles.body1,
      fontWeight: typography.fontWeight.medium,
      marginBottom: spacing[1],
    },
    menuSubtitle: {
      ...typography.styles.caption,
    },
    dangerSection: {
      padding: spacing[6],
    },
    dangerButton: {
      flexDirection: 'row',
      justifyContent: 'center',
      alignItems: 'center',
      backgroundColor: semanticColors.background.primary,
      paddingVertical: spacing[5],
      borderRadius: borderRadius.md,
      borderWidth: 1,
      borderColor: colors.error[500],
    },
    dangerButtonText: {
      ...typography.styles.body1,
      color: colors.error[500],
      fontWeight: typography.fontWeight.semibold,
      marginLeft: spacing[2],
    },
  });

  return (
    <View style={styles.container}>
      <StatusBar barStyle="light-content" backgroundColor={colors.primary[500]} />
      
      {/* Ìó§Îçî */}
      <SafeAreaView edges={['top']} style={styles.header}>
        <View style={styles.headerContent}>
          <Text style={styles.headerTitle}>ÌîÑÎ°úÌïÑ</Text>
          <TouchableOpacity style={styles.settingsButton}>
            <Icon name="cog-outline" size={20} color={semanticColors.text.secondary} />
          </TouchableOpacity>
        </View>
      </SafeAreaView>

      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
        {/* ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ïπ¥Îìú */}
        <View style={styles.userCard}>
          <View style={styles.userInfo}>
            <View style={styles.avatar}>
              <Icon name="account" size={32} color={colors.primary[500]} />
            </View>
            <View style={styles.userDetails}>
              <Text style={styles.userName}>ÎÇ¥ ÏßÄÍ∞ë</Text>
              <TouchableOpacity onPress={handleCopyAddress} style={styles.addressRow}>
                <Text style={styles.userAddress}>{formatAddress(address || '')}</Text>
                {address && (
                  <Icon 
                    name="content-copy" 
                    size={18} 
                    color={colors.primary[500]} 
                    style={styles.copyIcon}
                  />
                )}
              </TouchableOpacity>
            </View>
          </View>
          <View style={styles.balanceInfo}>
            <Text style={styles.balanceLabel}>Ï¥ù ÏûêÏÇ∞</Text>
            <Text style={styles.balanceValue}>${totalBalance.toLocaleString()}</Text>
          </View>
        </View>

        {/* Î©îÎâ¥ ÏÑπÏÖòÎì§ */}
        {menuItems.map((section) => (
          <View key={section.section} style={styles.menuSection}>
            <Text style={styles.sectionTitle}>{section.title}</Text>
            {section.items.map((item, index) => (
              <TouchableOpacity 
                key={index}
                style={[
                  styles.menuItem,
                  index === section.items.length - 1 && styles.lastMenuItem
                ]}
                onPress={item.onPress}
              >
                <View style={styles.menuItemLeft}>
                  <View style={styles.menuIcon}>
                    <Icon name={item.icon} size={20} color={semanticColors.text.secondary} />
                  </View>
                  <View style={styles.menuTextContainer}>
                    <Text style={styles.menuTitle}>{item.title}</Text>
                    <Text style={styles.menuSubtitle}>{item.subtitle}</Text>
                  </View>
                </View>
                <Icon name="chevron-right" size={16} color={semanticColors.text.tertiary} />
              </TouchableOpacity>
            ))}
          </View>
        ))}

        {/* ÏßÄÍ∞ë Ïó∞Í≤∞ Ìï¥Ï†ú */}
        <View style={styles.dangerSection}>
          <TouchableOpacity style={styles.dangerButton} onPress={handleDisconnect}>
            <Icon name="logout" size={20} color={colors.error[500]} />
            <Text style={styles.dangerButtonText}>ÏßÄÍ∞ë Ïó∞Í≤∞ Ìï¥Ï†ú</Text>
          </TouchableOpacity>
        </View>
      </ScrollView>
    </View>
  );
}

